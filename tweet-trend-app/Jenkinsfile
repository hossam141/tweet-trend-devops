def registry = 'https://valaxy01.jfrog.io'
def imageName = 'valaxy01.jfrog.io/valaxy-docker-local/ttrend'
def version   = '2.1.2'

pipeline {
    agent {
        node {
            label 'maven-agent'
        }
    }

environment {
    PATH = "/opt/apache-maven-3.9.1/bin:$PATH"
}
    stages {
         stage('Clone code') {
             steps {
                script {
                    sh '''
                    git clone --no-checkout https://github.com/hossam141/tweet-trend-devops.git
                    cd tweet-trend-devops
                    git config core.sparseCheckout true
                    echo "tweet-trend-app/*" > .git/info/sparse-checkout
                    git checkout main
                    '''
                }
             }
         }
        stage('build'){
            steps {
                echo '------------------- Build Started -------------'
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo '------------------- Build Completed -------------'
            }
        }

        stage('Unit Test') {
            steps{
                echo '------------------- Unit Test Started -------------'
                sh 'mvn surefire-report:report'
                echo '------------------- Unit Test Completed -------------'
            }
        }

        stage('SonarQube analysis') {
            environment {
            scannerHome = tool 'Valaxy-SonarScanner'
            }
            steps { 
            echo '------------------- Sonar Started -------------'
            withSonarQubeEnv('Valaxy-SonarQube-Server') {
                sh "${scannerHome}/bin/sonar-scanner"
            }
             echo '------------------- Sonar Analysis Completed -------------'
            }
        }

        stage("Quality Gate"){
        steps { 
            script {
                timeout(time: 1, unit: 'HOURS') {
                def qg = waitForQualityGate() 
                if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
                }
            }
        }
        }

        stage("Jar Publish") {
            steps {
                script {
                        echo '<--------------- Jar Publish Started --------------->'
                        def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"artifactory_token"
                        def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                        def uploadSpec = """{
                            "files": [
                                {
                                "pattern": "jarstaging/(*)",
                                "target": "libs-release-local/{1}",
                                "flat": "false",
                                "props" : "${properties}",
                                "exclusions": [ "*.sha1", "*.md5"]
                                }
                            ]
                        }"""
                        def buildInfo = server.upload(uploadSpec)
                        buildInfo.env.collect()
                        server.publishBuildInfo(buildInfo)
                        echo '<--------------- Jar Publish Ended --------------->'  

                }
            }
        }

        stage(" Docker Build ") {
            steps {
                script {
                echo '<--------------- Docker Build Started --------------->'
                app = docker.build(imageName+":"+version)
                echo '<--------------- Docker Build Ends --------------->'
                }
            }
        }

        stage (" Docker Publish "){
            steps {
                script {
                echo '<--------------- Docker Publish Started --------------->'  
                    docker.withRegistry(registry, 'artifactory_token'){
                        app.push()
                    }    
                echo '<--------------- Docker Publish Ended --------------->'  
                }
            }
        }

        stage (" Deployment "){
            steps {
                script {
                    sh './deploy.sh'
                }
            }       
        }
}
                           